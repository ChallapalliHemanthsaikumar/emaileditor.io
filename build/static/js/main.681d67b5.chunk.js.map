{"version":3,"sources":["edit.js","App.js","reportWebVitals.js","index.js"],"names":["app","Realm","id","Editor","user","emailEditorRef","useRef","onClick","current","editor","saveDesign","design","a","mongodb","currentUser","mongoClient","hello","db","collection","insertOne","name","console","log","body","rows","designer","mongodba","hell","findOne","sort","_id","limit","dat","templte","loadDesign","savedjson","exportHtml","data","html","mail","prompt","alert","ref","onLoad","App","React","useState","setUser","className","Login","loginAnonymous","logIn","anonymous","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAQMA,EAAM,IAAIC,IAAU,CAAEC,GADP,wBAgFNC,EA7ED,SAAC,GAAW,EAAVC,KAAW,IACjBC,EAAiBC,iBAAO,MA2D9B,OACI,gCACI,gCACI,wBAAQC,QA5DD,WACfF,EAAeG,QAAQC,OAAOC,YAAW,SAACC,GAAW,4CAInD,WAAwBA,GAAxB,iBAAAC,EAAA,6DACQC,EAAUb,EAAIc,YAAYC,YAAY,iBACtCC,EAAQH,EAAQI,GAAG,OAAOC,WAAW,SAF7C,SAGqBF,EAAMG,UAAU,CAACC,KAAKT,IAH3C,0DAJmD,sBACnDU,QAAQC,IAAI,aAAcX,EAAOY,KAAKC,MADa,oCAGlDC,CAASd,OAwDJ,yBACA,wBAAQJ,QA1CF,WAAM,4CAGpB,kCAAAK,EAAA,6DACUc,EAAW1B,EAAIc,YAAYC,YAAY,iBACvCY,EAAOD,EAAST,GAAG,OAAOC,WAAW,SAF/C,SAGsBS,EAAKC,QAAQ,GAAI,CAACC,KAAM,CAACC,KAAM,GAAIC,MAAO,IAHhE,OAGUC,EAHV,OAIIX,QAAQC,IAAIU,EAAIZ,KAAKG,MACfU,EAAUD,EAAIZ,KACpBf,EAAeG,QAAQC,OAAOyB,WAAWD,GAN7C,4CAHoB,0DAEpBE,IAwCQ,iCACA,wBAAQ5B,QA5BD,WACFF,EAAeG,QAAQC,OAAO2B,YAAW,SAACC,GACrD,IAAQ1B,EAAiB0B,EAAjB1B,OAAQ2B,EAASD,EAATC,KAChBjC,EAAeG,QAAQC,OAAOC,WAAWC,GAC1C,IAAM4B,EAAOC,OAAO,uBACpBC,MAAM,iBAAD,OAAkBF,EAAlB,8CACoBD,QAsBlB,4BAGH,cAAC,IAAD,CACLI,IAAKrC,EACLsC,OAlBS,mBC/CX3C,EAAM,IAAIC,IAAU,CAAEC,GADP,wBAuEN0C,EAlBH,WAGV,MAAwBC,IAAMC,SAAS9C,EAAIc,aAA3C,mBAAOV,EAAP,KAAa2C,EAAb,KAMA,OACE,qBAAKC,UAAU,MAAf,SACE,qBAAKA,UAAU,aAAf,SACG5C,EAAQ,cAAC,EAAD,CAAMA,KAAMA,IAAU,cAAC6C,EAAD,CAAOF,QAASA,SAoBvD,SAASE,EAAT,GAA6B,IAAZF,EAAW,EAAXA,QAITG,EAAc,uCAAG,4BAAAtC,EAAA,sEACFZ,EAAImD,MAAMlD,IAAkBmD,aAD1B,OACfhD,EADe,OAErB2C,EAAQ3C,GAFa,2CAAH,qDAIpB,OAAO,wBAAQG,QAAS2C,EAAjB,oBC3GT,IAYeG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.681d67b5.chunk.js","sourcesContent":["\r\nimport React, { useRef } from 'react';\r\nimport * as Realm from \"realm-web\";\r\n\r\n\r\n\r\nimport EmailEditor from 'react-email-editor'; \r\nconst REALM_APP_ID = \"application-0-cqmdo\"; // e.g. myapp-abcde\r\nconst app = new Realm.App({ id: REALM_APP_ID });\r\n\r\nconst Editor =({user}) => {\r\n    const emailEditorRef = useRef(null);\r\n\r\n    const saveDesign = () => {\r\n        emailEditorRef.current.editor.saveDesign((design) => {\r\n          console.log('saveDesign', design.body.rows);\r\n          \r\n           designer(design)\r\n          async function designer(design){\r\n            const mongodb = app.currentUser.mongoClient(\"mongodb-atlas\");\r\n            const hello = mongodb.db(\"use\").collection(\"users\");\r\n            const data = await hello.insertOne({name:design}) \r\n            \r\n            \r\n          }\r\n    \r\n         \r\n        }\r\n         );\r\n        \r\n    };\r\n\r\n    const editemail = () => {\r\n\r\n        savedjson()\r\n        async function savedjson(){\r\n            const mongodba = app.currentUser.mongoClient(\"mongodb-atlas\");\r\n            const hell = mongodba.db(\"use\").collection(\"users\");\r\n            const dat = await hell.findOne({}, {sort: {_id: -1}, limit: 1 });\r\n            console.log(dat.name.body)\r\n            const templte = dat.name\r\n            emailEditorRef.current.editor.loadDesign(templte);\r\n        }\r\n    }\r\n   \r\n\r\n\r\n    const exportHtml = () => {\r\n        const html = emailEditorRef.current.editor.exportHtml((data) => {\r\n          const { design, html } = data;\r\n          emailEditorRef.current.editor.saveDesign(design)\r\n         const mail = prompt(\"enter your email id\")\r\n         alert(`your email id ${mail} \r\n                 your html code ${html}`)\r\n\r\n\r\n           \r\n          //console.log('exportHtml', html);\r\n        });\r\n         \r\n      };\r\n    \r\n  const onLoad = () => {\r\n   \r\n    \r\n    // you can load your template here;\r\n    // const templateJson = {emailEditorRef}\r\n    // emailEditorRef.current.editor.loadDesign({emailEditorRef})\r\n     \r\n  };\r\n    return (\r\n        <div>\r\n            <div>\r\n                <button onClick={saveDesign}>save design</button>\r\n                <button onClick={editemail}>edit previous email</button>\r\n                <button onClick={exportHtml}>export Html</button>\r\n\r\n            </div>\r\n             <EmailEditor\r\n        ref={emailEditorRef}\r\n        onLoad={onLoad}\r\n        \r\n        />\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default Editor;\r\n\r\n","import Edit from './edit'\nimport React, { useRef } from 'react';\nimport * as Realm from \"realm-web\";\n//  import { render } from 'react-dom'\n\n\n\n// const MongoClient = require('mongodb').MongoClient;\n// const uri = \"mongodb+srv://admin:hemanth91@cluster0.ypptf.mongodb.net/Cluster0?retryWrites=true&w=majority\";\n// const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });\n\n\n\n\nconst REALM_APP_ID = \"application-0-cqmdo\"; // e.g. myapp-abcde\nconst app = new Realm.App({ id: REALM_APP_ID });\n\n\n\n\n\n\n\n\n\n\n\n  \n\n  \n\n \n\n \n  // const loadDesign = (id) => {\n  //   loaddata(id)\n  //   async function loaddata(id){\n  //     const mongodb = app.currentUser.mongoClient(\"mongodb-atlas\");\n  //     const hello = mongodb.db(\"use\").collection(\"users\");\n  //     const data = await hello.findOne({id:id})\n  //     emailEditorRef.current.editor.loadDesign((data))\n\n  //   }\n    \n  // }\n\n\n\n// // render(<App />, document.getElementById('app'))\n\n// export default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst App = () => {\n  // Keep the logged in Realm user in local state. This lets the app re-render\n  // whenever the current user changes (e.g. logs in or logs out).\n  const [user, setUser] = React.useState(app.currentUser);\n\n  \n\n  // If a user is logged in, show their details.\n  // Otherwise, show the login screen.\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        {user ?  <Edit user={user}/> : <Login setUser={setUser} />}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n// Create a component that lets an anonymous user log in\nfunction Login({ setUser }) {\n\n\n  \n  const loginAnonymous = async () => {\n    const user = await app.logIn(Realm.Credentials.anonymous());\n    setUser(user);\n  };\n  return <button onClick={loginAnonymous}>Log In</button>;\n}\n\n\n\n\n\n\n\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}